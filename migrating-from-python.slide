Migrating to Go from Python

Brian G. Merrell
Fungineer, Rakuten MediaForge
bgmerrell (Twitter, Gmail, GitHub, etc)

* Goal of this talk

Understand trade-offs between Go and Python development

.image migrating-from-python/img/gopher.png

* What I like about Python

- Easy-to-read syntax
- Powerful standard library
- Fun to write
- Get a lot done very quickly
- Often fast enough (in terms of execution speed)

* Justification -- Why another language?

"Programming had become too difficult"

Many programmers were choosing ease over safety and efficiency

The computing landscape and scale has changed

C++ is too complex

Compilation is too slow

*  

.image migrating-from-python/img/compiling.png 550 550

* 

.image migrating-from-python/img/flying-with-python.png

* What I dislike about Python

Runtime errors
 
It doesn't scale as well as I would like...

- with team size (many ways to do the same thing, pep8)
- with codebase size (runtine errors, type hierarchies, magic)
- with increasing performance demands (GIL, lack of concurrency primitives, interpreted)

*  

.image migrating-from-python/img/flying-with-go.jpg

* What I like about Go

- Small language
- Compile time checks (fast!)
- Fast enough for even more things
- Benefits come at very little cost
- Dynamic feel with compiled performance
- Rich standard library
- Libraries are all written in Go
- Great bundled tooling
- Seems to scale well (TBD)

* Benchmarks

.image migrating-from-python/img/go-python-benchmark.png 462 740

* What I dislike about Go

- Naked return statements
.code migrating-from-python/img/naked-return.go
- At case where I wish scoping rules were different
- Not faster than Java... yet 
- new, &T{}, make, range,

* Hello World

.play migrating-from-python/hello-world-web.go

* Gophercon 2014

TODO: Add notes about Python mentions at Gophercon

* Learning a new language

"...A straightforward translation of a C++ or Java program into Go is unlikely to produce a satisfactory resultâ€”Java programs are written in Java, not Go. [...] To write Go well, it's important to understand its properties and idioms. It's also important to know the established conventions for programming in Go, such as naming, formatting, program construction, and so on, so that programs you write will be easy for other Go programmers to understand."

Effective Go ([[http://golang.org/doc/effective_go.html]])

* The High-Level View

.image migrating-from-python/img/python-vs-go-table.png

* Go does not have...

Classes

Exceptions

Assertions

Templates / generics (for now)

Operator overloading

* Zen of Python

.code migrating-from-python/zen.txt

* Explicit is better than implicit

.play migrating-from-python/set-and-get-attr.py /START OMIT/,/END OMIT/

* Explicit is better than implicit

.play migrating-from-python/set-and-get-attr.py

* Simple is better than complex

- No decorators
- No static methods
- No class methods
- No properties
- No iterators
- No generators
- No exceptions

* Flat is better than nested

.play migrating-from-python/nested.py

* Flat is better than nested

.play migrating-from-python/flat.go /START OMIT/,/END OMIT/

* Sparse is better than dense

- No list comprehensions
.code migrating-from-python/one-liner-2.py
.code migrating-from-python/one-liner-3.py
- No ternary operator (expression?true:false)
.code migrating-from-python/one-liner-1.py

* Readability counts

Python

- Dense code
- Magic
- Lots of syntactic sugar

Go

- Small language
- Very little syntactic sugar
- Very explicit
- No operator overloading

* Errors should never pass silently (unless explicitly silenced)

.play migrating-from-python/errors.go

* Errors

What about Python's exception subtypes? (e.g., AttributeError, IOError, etc).

.play migrating-from-python/error-handling.go /START OMIT/,/END OMIT/

* Zero values

TODO

* Constructors

TODO

* Instantiation

TODO

* Encapsulation

Example: don't export struct but create a New function

* Encapsulation

TODO

* Duck typing

.play migrating-from-python/duck.py

* Structural typing

.play migrating-from-python/interfaces.go /START OMIT/,/END OMIT/

* Calling C code from Go

.code migrating-from-python/cgo.go

* Code organization

.code migrating-from-python/code-organization.txt

.code migrating-from-python/code-organization.go

.code migrating-from-python/code-organization-2.txt

* Code organization

.code migrating-from-python/code-organization-3.txt

* Packages

- Multiple files can belong to a package
- One package per directory
- The path to that directory determines the package's import path
- Build system locations dependencies from the source alone

* go get

Similar to pip install...

.code migrating-from-python/go-get.txt

.code migrating-from-python/go-get-2.txt

* gofmt (instead of PEP 8)

Before:

.play migrating-from-python/before-gofmt.go

After:

.play migrating-from-python/after-gofmt.go

* PEP 257

.code migrating-from-python/doc-comment.go

[[http://godoc.org/net/url#User]]

* Unit testing

TODO

* Code coverage

TODO 

* Things I miss from Python

- ?
